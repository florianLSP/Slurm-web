#!/usr/bin/python3

from dataclasses import dataclass
import sshtunnel
import paramiko
import shlex
import logging
import subprocess
from pathlib import Path

@dataclass
class PortForward:
    remote: int
    local: int

SLURMRESTD_PORT = 2375

FORWARDS = [
    PortForward(389, 3389),  # LDAP
    PortForward(SLURMRESTD_PORT, SLURMRESTD_PORT), # slurmrestd
    PortForward(6379, 6379), # redis
]

logger = logging.getLogger(__name__)

def main():
    logging.basicConfig(level=logging.INFO)
    server = "firehpc.dev.rackslab.io"
    zone = "deb12"
    remote_bind_addresses = []
    local_bind_addresses = []
    for forward in FORWARDS:
        remote_bind_addresses.append((f"admin.{zone}", forward.remote))
        local_bind_addresses.append(("localhost", forward.local))
    forwarder = sshtunnel.SSHTunnelForwarder(
        server,
        allow_agent=True,
        remote_bind_addresses=remote_bind_addresses,
        local_bind_addresses=local_bind_addresses,
        #logger=logger,
    )
    forwarder.start()

    # run socat to forward slurmrestd UNIX socket
    client = paramiko.SSHClient()
    client.load_host_keys(Path("~/.ssh/known_hosts").expanduser())
    logger.info("Connecting to development server %s", server)
    client.connect(server)
    cmd = shlex.join(["firehpc", "ssh", f"admin.{zone}", "socat", f"TCP-LISTEN:{SLURMRESTD_PORT},fork", "UNIX-CONNECT:/run/slurmrestd/slurmrestd.socket"])
    logger.info("running command on development server: %s", cmd)
    client.exec_command(cmd)

    cmd = ["socat", "UNIX-LISTEN:/tmp/slurmrestd.socket,fork", f"TCP-CONNECT:localhost:{SLURMRESTD_PORT}"]
    logger.info("running command locally: %s", shlex.join(cmd))
    logger.info("Development environment is ready, type ^c to stop")
    try:
        process = subprocess.run(cmd)
    except KeyboardInterrupt:
        logger.info("Stopping remote socat command")
        cmd = shlex.join(["firehpc", "ssh", f"admin.{zone}", "killall", "socat"])
        logger.info("Closing SSH connection")
        client.exec_command(cmd)
        client.close()
        logger.info("Stopping forwarder")
        forwarder.stop()
        logger.info("Stopping development environment")

if __name__ == "__main__":
    main()
