#!/usr/bin/env python3

import glob
from pathlib import Path

from rfl.build.ninja import NinjaBuilder

# Sizes names and associated DPI
SVG_SIZES = {"tiny": 32, "small": 64, "medium": 96, "large": 192}

INKSCAPE_COMMON_OPTS = "--export-type=png --export-overwrite"
BITMAPS_DIR = "bitmaps"
FAVICON_SIZES = [256, 64, 48, 32, 16]


def main():
    builder = NinjaBuilder()

    for size, dpi in SVG_SIZES.items():
        builder.rule(
            name=f"png-{size}",
            command=(
                f"inkscape $in {INKSCAPE_COMMON_OPTS} --export-dpi={dpi} "
                "--export-filename=$out"
            ),
        )

    # The SVG file is first converted to PNG by inkscape and converted into ico by
    # convert in order to keep alpha channel. If the SVG file is directly consumed by
    # convert, alpha channel is lost.
    builder.rule(
        name="favicon",
        command=(
            f"inkscape $in {INKSCAPE_COMMON_OPTS} --export-dpi=96 --export-filename=- "
            "| convert - -resize 256x256 -define "
            f"icon:auto-resize={','.join([str(size) for size in FAVICON_SIZES])} $out"
        ),
    )

    svgs = glob.glob("logo/*.svg")
    for svg_s in svgs:
        svg = Path(svg_s)
        for size in SVG_SIZES.keys():
            png = svg.parent / BITMAPS_DIR / f"{svg.stem}_{size}.png"
            builder.build(outputs=[png], rule=f"png-{size}", inputs=[svg])

    svg = Path("favicon/favicon.svg")
    ico = svg.parent / BITMAPS_DIR / "favicon.ico"
    builder.build(outputs=[ico], rule="favicon", inputs=[svg])

    builder.run()


if __name__ == "__main__":
    main()
